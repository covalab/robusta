// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_robusta_auth/test/src/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/widgets.dart' as _i1;
import 'package:go_router/go_router.dart' as _i4;
import 'package:go_router_plus/src/screen.dart' as _i3;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueKey_1<T> extends _i2.SmartFake implements _i1.ValueKey<T> {
  _FakeValueKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Screen].
///
/// See the documentation for Mockito's code generation for more information.
class MockScreen extends _i2.Mock implements _i3.Screen {
  MockScreen() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get routePath => (super.noSuchMethod(
        Invocation.getter(#routePath),
        returnValue: '',
      ) as String);
  @override
  String get routeName => (super.noSuchMethod(
        Invocation.getter(#routeName),
        returnValue: '',
      ) as String);
  @override
  _i1.GlobalKey<_i1.NavigatorState> get rootNavigatorKey => (super.noSuchMethod(
        Invocation.getter(#rootNavigatorKey),
        returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
          this,
          Invocation.getter(#rootNavigatorKey),
        ),
      ) as _i1.GlobalKey<_i1.NavigatorState>);
  @override
  dynamic build(
    _i1.BuildContext? context,
    _i4.GoRouterState? state,
  ) =>
      super.noSuchMethod(Invocation.method(
        #build,
        [
          context,
          state,
        ],
      ));
  @override
  List<_i3.ScreenBase> subScreens() => (super.noSuchMethod(
        Invocation.method(
          #subScreens,
          [],
        ),
        returnValue: <_i3.ScreenBase>[],
      ) as List<_i3.ScreenBase>);
}

/// A class which mocks [GoRouterState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoRouterState extends _i2.Mock implements _i4.GoRouterState {
  MockGoRouterState() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: '',
      ) as String);
  @override
  String get subloc => (super.noSuchMethod(
        Invocation.getter(#subloc),
        returnValue: '',
      ) as String);
  @override
  Map<String, String> get params => (super.noSuchMethod(
        Invocation.getter(#params),
        returnValue: <String, String>{},
      ) as Map<String, String>);
  @override
  Map<String, String> get queryParams => (super.noSuchMethod(
        Invocation.getter(#queryParams),
        returnValue: <String, String>{},
      ) as Map<String, String>);
  @override
  Map<String, List<String>> get queryParametersAll => (super.noSuchMethod(
        Invocation.getter(#queryParametersAll),
        returnValue: <String, List<String>>{},
      ) as Map<String, List<String>>);
  @override
  _i1.ValueKey<String> get pageKey => (super.noSuchMethod(
        Invocation.getter(#pageKey),
        returnValue: _FakeValueKey_1<String>(
          this,
          Invocation.getter(#pageKey),
        ),
      ) as _i1.ValueKey<String>);
  @override
  String namedLocation(
    String? name, {
    Map<String, String>? params = const {},
    Map<String, String>? queryParams = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedLocation,
          [name],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValue: '',
      ) as String);
}
